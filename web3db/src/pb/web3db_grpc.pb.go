// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: web3db.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BootstrappingCommsClient is the client API for BootstrappingComms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrappingCommsClient interface {
	JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*JoinNetworkReply, error)
}

type bootstrappingCommsClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrappingCommsClient(cc grpc.ClientConnInterface) BootstrappingCommsClient {
	return &bootstrappingCommsClient{cc}
}

func (c *bootstrappingCommsClient) JoinNetwork(ctx context.Context, in *JoinNetworkRequest, opts ...grpc.CallOption) (*JoinNetworkReply, error) {
	out := new(JoinNetworkReply)
	err := c.cc.Invoke(ctx, "/web3db.pb.BootstrappingComms/JoinNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrappingCommsServer is the server API for BootstrappingComms service.
// All implementations must embed UnimplementedBootstrappingCommsServer
// for forward compatibility
type BootstrappingCommsServer interface {
	JoinNetwork(context.Context, *JoinNetworkRequest) (*JoinNetworkReply, error)
	mustEmbedUnimplementedBootstrappingCommsServer()
}

// UnimplementedBootstrappingCommsServer must be embedded to have forward compatible implementations.
type UnimplementedBootstrappingCommsServer struct {
}

func (UnimplementedBootstrappingCommsServer) JoinNetwork(context.Context, *JoinNetworkRequest) (*JoinNetworkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedBootstrappingCommsServer) mustEmbedUnimplementedBootstrappingCommsServer() {}

// UnsafeBootstrappingCommsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrappingCommsServer will
// result in compilation errors.
type UnsafeBootstrappingCommsServer interface {
	mustEmbedUnimplementedBootstrappingCommsServer()
}

func RegisterBootstrappingCommsServer(s grpc.ServiceRegistrar, srv BootstrappingCommsServer) {
	s.RegisterService(&BootstrappingComms_ServiceDesc, srv)
}

func _BootstrappingComms_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrappingCommsServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3db.pb.BootstrappingComms/JoinNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrappingCommsServer).JoinNetwork(ctx, req.(*JoinNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrappingComms_ServiceDesc is the grpc.ServiceDesc for BootstrappingComms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrappingComms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web3db.pb.BootstrappingComms",
	HandlerType: (*BootstrappingCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNetwork",
			Handler:    _BootstrappingComms_JoinNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3db.proto",
}

// MasterNodeCommsClient is the client API for MasterNodeComms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterNodeCommsClient interface {
	AssignMasterNode(ctx context.Context, in *AssignMasterNodeRequest, opts ...grpc.CallOption) (*AssignMasterNodeReply, error)
}

type masterNodeCommsClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterNodeCommsClient(cc grpc.ClientConnInterface) MasterNodeCommsClient {
	return &masterNodeCommsClient{cc}
}

func (c *masterNodeCommsClient) AssignMasterNode(ctx context.Context, in *AssignMasterNodeRequest, opts ...grpc.CallOption) (*AssignMasterNodeReply, error) {
	out := new(AssignMasterNodeReply)
	err := c.cc.Invoke(ctx, "/web3db.pb.MasterNodeComms/AssignMasterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterNodeCommsServer is the server API for MasterNodeComms service.
// All implementations must embed UnimplementedMasterNodeCommsServer
// for forward compatibility
type MasterNodeCommsServer interface {
	AssignMasterNode(context.Context, *AssignMasterNodeRequest) (*AssignMasterNodeReply, error)
	mustEmbedUnimplementedMasterNodeCommsServer()
}

// UnimplementedMasterNodeCommsServer must be embedded to have forward compatible implementations.
type UnimplementedMasterNodeCommsServer struct {
}

func (UnimplementedMasterNodeCommsServer) AssignMasterNode(context.Context, *AssignMasterNodeRequest) (*AssignMasterNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMasterNode not implemented")
}
func (UnimplementedMasterNodeCommsServer) mustEmbedUnimplementedMasterNodeCommsServer() {}

// UnsafeMasterNodeCommsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterNodeCommsServer will
// result in compilation errors.
type UnsafeMasterNodeCommsServer interface {
	mustEmbedUnimplementedMasterNodeCommsServer()
}

func RegisterMasterNodeCommsServer(s grpc.ServiceRegistrar, srv MasterNodeCommsServer) {
	s.RegisterService(&MasterNodeComms_ServiceDesc, srv)
}

func _MasterNodeComms_AssignMasterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMasterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeCommsServer).AssignMasterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web3db.pb.MasterNodeComms/AssignMasterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeCommsServer).AssignMasterNode(ctx, req.(*AssignMasterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterNodeComms_ServiceDesc is the grpc.ServiceDesc for MasterNodeComms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterNodeComms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web3db.pb.MasterNodeComms",
	HandlerType: (*MasterNodeCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMasterNode",
			Handler:    _MasterNodeComms_AssignMasterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web3db.proto",
}
